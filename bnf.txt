<PROGRAM> ::= <DECLARATIONS>
<DECLARATIONS> ::= <DECLERATIONS> <DECLERATION> | <DECLERATION>
<DECLERATION> ::= <VARIABLES> | <FUNCTION>
<FUNCTION> ::= <TYPE> ID (PARAMETERS)  <STATEMENT> |ID (PARAMETERS) <STATEMENT>	

<STATEMENTS> ::= <STATEMENTS> <STATEMENT>
<STATEMENT> ::= <EXPRESSION> | <IF_STATEMENT> | <LOOP_STATEMENT> | <PRINT> | <SWITCH> | <BREAK>  | COMMENT
<LOOP_STATEMENT> ::= for ID=range do <STATEMENT> | while <PLAIN_EXPRESSION> do <STATEMENT>
<IF_STATEMENT> ::= if <PLAIN_EXPRESSION> then <STATEMENT> | if <PLAIN_EXPRESSION> then <STATEMENT> else <STATEMENT>

<EXPRESSION_STATEMENT> ::= <EXPRESSION> ; | ;
<EXPRESSION> = <VARIABLE> <EQUALS_OPERATOR> <EXPRESSION> | <VARIABLE> ++ | <VARIABLE> -- | <PLAIN_EXPRESSION>

<VARIABLES> ::= <VARIABLE>| <VARIABLE> ',' <VARIABLE>
<VARIABLE> ::= ID | ID [ EXPRESSION ]

<PARAMETERS> ::= <PARAMETERS_LIST> ; <TYPELIST> | <TYPELIST>
<PARAMETERS_LIST> ::= <TYPE> <ID_LIST>
<ID_LIST> ::= <ID_LIST>, <PARAMETER_ID> | <PARAMETER_ID>
<PARAMETER_ID> ::= ID| ID []

<TYPE> = int | char

<RETURN> ::= return ; | return <EXPRESSION>;
<BREAK> ::= break

<PLAIN_EXPRESSION> ::= <PLAIN_EXPRESSION> or <AND_EXPRESSION> | <AND_EXPRESSION>
<AND_EXPRESSION> ::= <AND_EXPRESSION> and <UNARY_EXPRESSION> | <UNARY_EXPRESSION>
<UNARY_EXPRESSION> ::= not <UNARY_EXPRESSION> | <EXPRESSION>

<MULTIPLY_EXPRESSION> ::= <MULTIPLY_EXPRESSION> <MULTIPLY_OPERATOR> <UNARY_EXPRESSION> | <UNARY_EXPRESSION>
<MULTIPLY_OPERATOR> ::= * | / | %
<UNARY_EXPRESSION> ::= <UNARY_OPERATOR> <UNARY_EXPRESSION> | <VARIABLE>
<UNARY_OPERATOR> ::= - | * | ?

<EQUALS_OPERATOR> ::= '=' | '+=' | '-=' | '*=' | '/='